name: To-Do App CI Pipeline

on:
  push:
    branches:
      - main
      - dev-branch
  pull_request:
    branches:
      - main
      - dev-branch

jobs:
  open_ai_code_review:
    name: OpenAI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      - name: Install Dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      # Currently debugging with the help of ChatGPT
      - name: Verify OpenAI API Key
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "ERROR: OpenAI API Key is missing!"
            exit 1
          fi

      - name: Generate PR Diff
        run: |
          git fetch --no-tags --prune --depth=2 origin
          git diff origin/${{ github.base_ref }}..origin/${{ github.head_ref }} > pr_diff.txt

          if [ ! -s pr_diff.txt ]; then
            echo "Error: No changes detected. Skipping AI review." > openai-code-reviews/review.txt
            exit 0
          fi

      - name: Debug PR Diff Content
        run: |
          echo "PR Diff Content:"
          cat pr_diff.txt

      - name: Generate OpenAI Request JSON
        run: |
          PR_TITLE=$(jq -r '.pull_request.title' $GITHUB_EVENT_PATH)
          PR_AUTHOR=$(jq -r '.pull_request.user.login' $GITHUB_EVENT_PATH)
          PR_URL=$(jq -r '.pull_request.html_url' $GITHUB_EVENT_PATH)
          PR_DIFF=$(head -c 4000 pr_diff.txt)

          jq -n --arg model "gpt-4" \
                --arg pr_title "$PR_TITLE" \
                --arg pr_author "$PR_AUTHOR" \
                --arg pr_url "$PR_URL" \
                --arg pr_diff "$PR_DIFF" \
                '{
                  model: $model,
                  messages: [
                    {role: "system", content: "You are an expert software reviewer. Provide detailed, constructive feedback."},
                    {role: "user", content: ("## PR Details\n**Title:** " + $pr_title + "\n**Author:** " + $pr_author + "\n**URL:** " + $pr_url)},
                    {role: "user", content: ("## Code Changes\n\n```diff\n" + $pr_diff + "\n```")},
                    {role: "user", content: "### Evaluate:\n1. **Code Quality**\n2. **Security Risks**\n3. **Best Practices**\n4. **Performance**\n5. **General Comments**"}
                  ]
                }' > request.json

      - name: Debug OpenAI Request JSON
        run: cat request.json

      - name: Send Request to OpenAI API
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @request.json)

          echo "$RESPONSE" > openai-api-response.json

          jq -r '.choices[0].message.content // "Error: OpenAI response is empty or malformed."' openai-api-response.json > openai-code-reviews/review.txt

      - name: Debug OpenAI API Response
        run: cat openai-api-response.json

      - name: Upload AI Code Review
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-review
          path: openai-code-reviews/*.txt

  tests:
    name: Run Django Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          source venv/bin/activate
          mkdir -p test_results
          cd team1project
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          python manage.py test | tee ../test_results/test_results_${TIMESTAMP}.txt || echo "No tests found, skipping test step."

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results/*.txt

  coverage:
    name: Report Test Coverage
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Generate Coverage Report
        run: |
          source venv/bin/activate
          mkdir -p coverage_reports
          cd team1project
          coverage run --source='.' manage.py test
          coverage report -m
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          coverage xml -o ../coverage_reports/coverage_${TIMESTAMP}.xml

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_reports/*.xml
